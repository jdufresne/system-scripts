#!/usr/bin/env python3

import argparse
import functools
import pathlib
import subprocess
import sys
import urllib

import requests

PREFERRED_BRANCH = "main"


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--token", required=True)
    parser.add_argument("dest", type=pathlib.Path)
    return parser.parse_args()


class GitHub:
    BASE = "https://api.github.com"

    def __init__(self, token):
        self.token = token

    def request(self, path, *, method="get", **kwargs):
        url = urllib.parse.urljoin(self.BASE, path)
        headers = {
            "Accept": "application/vnd.github.v3+json",
            "Authorization": f"token {self.token}",
        }
        method = getattr(requests, method)
        response = method(url, headers=headers, **kwargs)
        try:
            response.raise_for_status()
        except requests.exceptions.HTTPError:
            print(response.text, file=sys.stderr)
            raise
        return response.json()

    def paginate(self, path, *, params):
        page = 0
        while True:
            page += 1
            page_params = [*params, ("page", page)]
            response = self.get(path, params=page_params)
            if not response:
                break

            yield response

    def __getattr__(self, name):
        return functools.partial(self.request, method=name)


def main():
    args = parse_args()
    args.dest.mkdir(parents=True, exist_ok=True)

    github = GitHub(args.token)

    for repos in github.paginate("/user/repos", params=[("type", "owner")]):
        for repo_info in repos:
            repo_info = github.get(repo_info["url"])

            msg = repo_info["full_name"]
            if repo_info["fork"]:
                msg = f"{msg} (forked from {repo_info['parent']['full_name']})"
            print(msg)

            if repo_info["fork"]:
                repo_path = args.dest / repo_info["parent"]["full_name"]
            else:
                repo_path = args.dest / repo_info["full_name"]
            repo_path.parent.mkdir(exist_ok=True)

            if not repo_path.is_dir():
                cmd = ["git", "-C", repo_path.parent, "clone", repo_info["ssh_url"]]
                subprocess.run(cmd, check=True)

            if repo_info["fork"]:
                cmd = ["git", "-C", repo_path, "remote", "get-url", "upstream"]
                result = subprocess.run(
                    cmd, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT
                )
                if result.returncode:
                    parent_ssh_url = repo_info["parent"]["ssh_url"]
                    cmd = [
                        "git",
                        "-C",
                        repo_path,
                        "remote",
                        "add",
                        "upstream",
                        parent_ssh_url,
                    ]
                    subprocess.run(cmd, check=True)

            cmd = ["git", "-C", repo_path, "diff", "--exit-code"]
            subprocess.run(cmd, check=True)

            default_branch = repo_info["default_branch"]
            expected_default_branch = (
                repo_info["parent"]["default_branch"]
                if repo_info["fork"]
                else PREFERRED_BRANCH
            )
            if default_branch != expected_default_branch:
                github.post(
                    repo_info["branches_url"].replace(
                        "{/branch}", f"/{default_branch}/rename"
                    ),
                    json={"new_name": expected_default_branch},
                )
                default_branch = expected_default_branch

            cmd = ["git", "-C", repo_path, "fetch", "--all", "--prune"]
            subprocess.run(cmd, check=True)

            cmd = ["git", "-C", repo_path, "checkout", default_branch]
            subprocess.run(cmd, check=True)

            remote = "upstream" if repo_info["fork"] else "origin"
            cmd = [
                "git",
                "-C",
                repo_path,
                "reset",
                "--hard",
                f"{remote}/{default_branch}",
            ]
            subprocess.run(cmd, check=True)

            if repo_info["fork"]:
                cmd = [
                    "git",
                    "-C",
                    repo_path,
                    "push",
                    "--force",
                    "--tags",
                    "origin",
                    default_branch,
                ]
                subprocess.run(cmd, check=True)

            cmd = ["git", "-C", repo_path, "clean", "-dxff"]
            subprocess.run(cmd, check=True)

            print()


if __name__ == "__main__":
    main()
